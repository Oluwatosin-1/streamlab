# Generated by Django 5.1.2 on 2025-03-29 01:07

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(help_text="The content of the chat message")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Time when the message was created"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ScheduledVideo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "video_file",
                    models.FileField(
                        blank=True, null=True, upload_to="scheduled_videos/"
                    ),
                ),
                ("scheduled_time", models.DateTimeField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_published", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="StreamingConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("stream_title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "platform",
                    models.CharField(
                        choices=[
                            ("youtube", "YouTube"),
                            ("facebook", "Facebook"),
                            ("twitch", "Twitch"),
                            ("instagram", "Instagram"),
                            ("tiktok", "TikTok"),
                            ("telegram", "Telegram"),
                            ("custom", "Custom"),
                        ],
                        default="custom",
                        max_length=50,
                    ),
                ),
                (
                    "rtmp_url",
                    models.CharField(
                        help_text="RTMP endpoint (primary)",
                        max_length=500,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid URL. It should start with http, https, rtmp or rtmps.",
                                regex="^(https?|rtmps?|ftp)://.+$",
                            )
                        ],
                    ),
                ),
                (
                    "stream_key",
                    models.CharField(help_text="Unique stream key", max_length=255),
                ),
                (
                    "backup_rtmp_url",
                    models.CharField(
                        blank=True,
                        help_text="Backup RTMP endpoint",
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid URL. It should start with http, https, rtmp or rtmps.",
                                regex="^(https?|rtmps?|ftp)://.+$",
                            )
                        ],
                    ),
                ),
                (
                    "backup_stream_key",
                    models.CharField(
                        blank=True,
                        help_text="Backup stream key",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "pull_links",
                    models.TextField(
                        blank=True,
                        help_text="Comma-separated or multi-line list of pull links",
                        null=True,
                    ),
                ),
                (
                    "embed_player_url",
                    models.CharField(
                        blank=True,
                        help_text="URL to embed the web player",
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid URL. It should start with http, https, rtmp or rtmps.",
                                regex="^(https?|rtmps?|ftp)://.+$",
                            )
                        ],
                    ),
                ),
                (
                    "embed_chat_url",
                    models.CharField(
                        blank=True,
                        help_text="URL to embed multi-platform chat",
                        max_length=500,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid URL. It should start with http, https, rtmp or rtmps.",
                                regex="^(https?|rtmps?|ftp)://.+$",
                            )
                        ],
                    ),
                ),
                ("resolution", models.CharField(default="1080p", max_length=50)),
                ("bitrate", models.CharField(default="4500kbps", max_length=50)),
                (
                    "is_active",
                    models.BooleanField(
                        default=False, help_text="Is this config currently active?"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="StreamingPlatformAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "platform",
                    models.CharField(
                        choices=[
                            ("youtube", "YouTube"),
                            ("facebook", "Facebook"),
                            ("twitch", "Twitch"),
                            ("instagram", "Instagram"),
                            ("tiktok", "TikTok"),
                            ("telegram", "Telegram"),
                            ("custom", "Custom"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "account_username",
                    models.CharField(
                        help_text="Username or channel name on the platform",
                        max_length=255,
                    ),
                ),
                (
                    "rtmp_url",
                    models.CharField(
                        blank=True,
                        help_text="RTMP URL for the account",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "stream_key",
                    models.CharField(
                        blank=True,
                        help_text="Stream key for the account",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="Display name for the account",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "access_token",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "refresh_token",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="StreamingSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("session_start", models.DateTimeField(auto_now_add=True)),
                ("session_end", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("live", "Live"),
                            ("ended", "Ended"),
                            ("error", "Error"),
                        ],
                        default="live",
                        max_length=50,
                    ),
                ),
                ("viewers_count", models.PositiveIntegerField(default=0)),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error details if session encounters issues",
                        null=True,
                    ),
                ),
            ],
        ),
    ]
